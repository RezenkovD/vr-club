name: ci/cd

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python version
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install postgresql postgresql-contrib -y
          sudo service postgresql start
          sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.NAME }};"
          sudo -u postgres psql -c "ALTER USER ${{ secrets.USER }} WITH PASSWORD '${{ secrets.PASSWORD }}';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.NAME }} TO  ${{ secrets.USER }};"

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

  tests:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python version
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install postgresql postgresql-contrib -y
          sudo service postgresql start
          sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.NAME }};"
          sudo -u postgres psql -c "ALTER USER ${{ secrets.USER }} WITH PASSWORD '${{ secrets.PASSWORD }}';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.NAME }} TO  ${{ secrets.USER }};"

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Test with Pytest
        run: |
          coverage run --source='.' manage.py test
          coverage xml
        env:
          CI: true
          HOST: ${{ secrets.HOST }}
          NAME: ${{ secrets.NAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
          PORT: ${{ secrets.PORT }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          USER: ${{ secrets.USER }}
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          DEBUG: ${{ secrets.DEBUG }}

      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: pytest-coverage
          path: |
            ./coverage.xml

      - name: Check coverage
        run: |
          export coverage=$(grep -oP 'line-rate="\K[^"]+' coverage.xml | head -1 | awk '{print $1 * 100}')
          echo "Code coverage: $coverage%"
          if (( $(echo "$coverage < 60" | bc -l) )); then
            echo "Code coverage is less than 60%: $coverage%"
            exit 1
          fi

  linters:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python version
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Check code formatting with Flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with Black
        run: |
          black --check --verbose .

  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python version
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Reload webapp
        uses: jensvog/pythonanywhere-webapp-reload-action@v1
        with:
          host: 'www.pythonanywhere.com'
          username: ${{ secrets.PYTHONANYWHERE_USERNAME }}
          api-token: ${{ secrets.API_TOKEN }}
          domain-name: ${{ secrets.DOMAIN_NAME }}
